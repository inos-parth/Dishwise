{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useGoogleMap.js\nimport { useState, useCallback, useRef, useEffect } from 'react';\nexport const useGoogleMap = searchLocation => {\n  _s();\n  const [restaurants, setRestaurants] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const markersRef = useRef([]);\n  const mapRef = useRef(null);\n  const clearMarkers = () => {\n    if (markersRef.current) {\n      markersRef.current.forEach(marker => marker.setMap(null));\n      markersRef.current = [];\n    }\n  };\n  const initMap = useCallback(async () => {\n    if (!window.google) {\n      throw new Error(\"Google Maps not loaded\");\n    }\n    try {\n      var _searchLocation$coord, _searchLocation$coord2;\n      clearMarkers();\n      if (!(searchLocation !== null && searchLocation !== void 0 && (_searchLocation$coord = searchLocation.coordinates) !== null && _searchLocation$coord !== void 0 && _searchLocation$coord.lat) || !(searchLocation !== null && searchLocation !== void 0 && (_searchLocation$coord2 = searchLocation.coordinates) !== null && _searchLocation$coord2 !== void 0 && _searchLocation$coord2.lng)) {\n        throw new Error(\"Invalid location coordinates\");\n      }\n      const coordinates = new window.google.maps.LatLng(searchLocation.coordinates.lat, searchLocation.coordinates.lng);\n      mapRef.current = new window.google.maps.Map(document.getElementById(\"map\"), {\n        center: coordinates,\n        zoom: 14,\n        mapId: \"3d323ae4d3f413fd\"\n      });\n      const service = new window.google.maps.places.PlacesService(mapRef.current);\n      const results = await new Promise((resolve, reject) => {\n        service.nearbySearch({\n          location: coordinates,\n          radius: 5000,\n          type: ['restaurant', 'cafe'],\n          rankBy: window.google.maps.places.RankBy.DISTANCE\n        }, (results, status) => {\n          if (status === window.google.maps.places.PlacesServiceStatus.OK) {\n            resolve(results);\n          } else {\n            reject(new Error(`Places API error: ${status}`));\n          }\n        });\n      });\n\n      // Create markers for each restaurant\n      results.forEach(restaurant => {\n        var _restaurant$geometry;\n        if ((_restaurant$geometry = restaurant.geometry) !== null && _restaurant$geometry !== void 0 && _restaurant$geometry.location) {\n          const marker = new window.google.maps.Marker({\n            position: restaurant.geometry.location,\n            map: mapRef.current,\n            title: restaurant.name\n          });\n          const infowindow = new window.google.maps.InfoWindow({\n            content: `\n                            <div>\n                                <h3>${restaurant.name}</h3>\n                                <p>${restaurant.vicinity}</p>\n                                <p>${restaurant.rating ? `${restaurant.rating} ⭐` : \"No rating\"}</p>\n                            </div>\n                        `\n          });\n          marker.addListener('click', () => {\n            infowindow.open(mapRef.current, marker);\n          });\n          markersRef.current.push(marker);\n        }\n      });\n      setRestaurants(results);\n      setLoading(false);\n      return results;\n    } catch (err) {\n      setError(err.message);\n      setLoading(false);\n      throw err;\n    }\n  }, [searchLocation]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      clearMarkers();\n    };\n  }, []);\n  return {\n    restaurants,\n    loading,\n    error,\n    initMap\n  };\n};\n_s(useGoogleMap, \"jafBQvSiGTckAPpnrVSD1xrqk1Y=\");","map":{"version":3,"names":["useState","useCallback","useRef","useEffect","useGoogleMap","searchLocation","_s","restaurants","setRestaurants","loading","setLoading","error","setError","markersRef","mapRef","clearMarkers","current","forEach","marker","setMap","initMap","window","google","Error","_searchLocation$coord","_searchLocation$coord2","coordinates","lat","lng","maps","LatLng","Map","document","getElementById","center","zoom","mapId","service","places","PlacesService","results","Promise","resolve","reject","nearbySearch","location","radius","type","rankBy","RankBy","DISTANCE","status","PlacesServiceStatus","OK","restaurant","_restaurant$geometry","geometry","Marker","position","map","title","name","infowindow","InfoWindow","content","vicinity","rating","addListener","open","push","err","message"],"sources":["/Users/riyagolani/Library/Mobile Documents/com~apple~CloudDocs/Documents/Code/Dishwise/client/src/hooks/useGoogleMaps.js"],"sourcesContent":["// src/hooks/useGoogleMap.js\nimport { useState, useCallback, useRef, useEffect } from 'react';\n\nexport const useGoogleMap = (searchLocation) => {\n    const [restaurants, setRestaurants] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const markersRef = useRef([]);\n    const mapRef = useRef(null);\n\n    const clearMarkers = () => {\n        if (markersRef.current) {\n            markersRef.current.forEach(marker => marker.setMap(null));\n            markersRef.current = [];\n        }\n    };\n\n    const initMap = useCallback(async () => {\n        if (!window.google) {\n            throw new Error(\"Google Maps not loaded\");\n        }\n\n        try {\n            clearMarkers();\n\n            if (!searchLocation?.coordinates?.lat || !searchLocation?.coordinates?.lng) {\n                throw new Error(\"Invalid location coordinates\");\n            }\n\n            const coordinates = new window.google.maps.LatLng(\n                searchLocation.coordinates.lat,\n                searchLocation.coordinates.lng\n            );\n\n            mapRef.current = new window.google.maps.Map(document.getElementById(\"map\"), {\n                center: coordinates,\n                zoom: 14,\n                mapId: \"3d323ae4d3f413fd\"\n            });\n\n            const service = new window.google.maps.places.PlacesService(mapRef.current);\n\n            const results = await new Promise((resolve, reject) => {\n                service.nearbySearch({\n                    location: coordinates,\n                    radius: 5000,\n                    type: ['restaurant', 'cafe'],\n                    rankBy: window.google.maps.places.RankBy.DISTANCE, \n                }, (results, status) => {\n                    if (status === window.google.maps.places.PlacesServiceStatus.OK) {\n                        resolve(results);\n                    } else {\n                        reject(new Error(`Places API error: ${status}`));\n                    }\n                });\n            });\n\n            // Create markers for each restaurant\n            results.forEach(restaurant => {\n                if (restaurant.geometry?.location) {\n                    const marker = new window.google.maps.Marker({\n                        position: restaurant.geometry.location,\n                        map: mapRef.current,\n                        title: restaurant.name\n                    });\n\n                    const infowindow = new window.google.maps.InfoWindow({\n                        content: `\n                            <div>\n                                <h3>${restaurant.name}</h3>\n                                <p>${restaurant.vicinity}</p>\n                                <p>${restaurant.rating ? `${restaurant.rating} ⭐` : \"No rating\"}</p>\n                            </div>\n                        `\n                    });\n\n                    marker.addListener('click', () => {\n                        infowindow.open(mapRef.current, marker);\n                    });\n\n                    markersRef.current.push(marker);\n                }\n            });\n\n            setRestaurants(results);\n            setLoading(false);\n            return results;\n        } catch (err) {\n            setError(err.message);\n            setLoading(false);\n            throw err;\n        }\n    }, [searchLocation]);\n\n    // Cleanup on unmount\n    useEffect(() => {\n        return () => {\n            clearMarkers();\n        };\n    }, []);\n\n    return { restaurants, loading, error, initMap };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}