{"version":3,"file":"static/js/144.45f6b061.chunk.js","mappings":"8JAKA,MAAMA,EAAiBC,IAAqB,IAADC,EAAA,IAAnB,WAAEC,GAAYF,EAClC,MAAOG,EAAUC,IAAeC,EAAAA,EAAAA,WAAS,IAClCC,EAAUC,IAAeF,EAAAA,EAAAA,UAAS,OAClCG,EAASC,IAAcJ,EAAAA,EAAAA,WAAS,GACjCK,GAAWC,EAAAA,EAAAA,MAMjB,OACIC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,EACV,QAAjBb,EAAAC,EAAWa,cAAM,IAAAd,OAAA,EAAjBA,EAAoB,MACjBe,EAAAA,EAAAA,KAAA,OACIC,IAAKf,EAAWa,OAAO,GAAGG,SAC1BC,IAAKjB,EAAWkB,KAChBP,UAAU,sBAGlBD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,EAC5BE,EAAAA,EAAAA,KAAA,MAAAF,SAAKZ,EAAWkB,QAChBJ,EAAAA,EAAAA,KAAA,KAAAF,SAAIZ,EAAWmB,YACfT,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qBAAoBC,SAAA,EAC/BE,EAAAA,EAAAA,KAAA,QAAMH,UAAU,SAAQC,SACnBZ,EAAWoB,OAAS,GAAGpB,EAAWoB,gBAAa,cAEnDpB,EAAWqB,cACRP,EAAAA,EAAAA,KAAA,QAAMH,UAAU,cAAaC,SACxB,IAAIU,OAAOtB,EAAWqB,kBAIlCrB,EAAWuB,gBACRT,EAAAA,EAAAA,KAAA,KAAGH,UAAW,WAAUX,EAAWuB,cAAcC,OAC3CxB,EAAWuB,cAAcC,SACrB,OACA,SACJ,WACCZ,SACFZ,EAAWuB,cAAcC,OACpBxB,EAAWuB,cAAcC,SACrB,WACA,SACJ,4BAGdV,EAAAA,EAAAA,KAAA,UACIH,UAAU,mBACVc,QA1COC,KACnBlB,EAAS,eAAeR,EAAW2B,gBAAgB,EAyCff,SAC3B,cAIAX,GAAYG,IACTU,EAAAA,EAAAA,KAAA,OAAKH,UAAU,aAAYC,UACvBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EACzBF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CAAKZ,EAAWkB,KAAK,cACrBJ,EAAAA,EAAAA,KAAA,UAAQH,UAAU,aAAac,QAASA,IAAMvB,GAAY,GAAOU,SAAC,UAClEE,EAAAA,EAAAA,KAAA,OAAKH,UAAU,aAAYC,SACtBR,EAASwB,KAAI,CAACC,EAAMC,KACjBpB,EAAAA,EAAAA,MAAA,OAAiBC,UAAU,YAAWC,SAAA,EAClCE,EAAAA,EAAAA,KAAA,QAAMH,UAAU,YAAWC,SAAEiB,EAAKX,QAClCR,EAAAA,EAAAA,MAAA,QAAMC,UAAU,aAAYC,SAAA,CAAC,IAAEiB,EAAKE,WAF9BD,iBAUhC,EAoKd,EAhK0BE,KAAO,IAADC,EAC5B,MAAMC,GAAWC,EAAAA,EAAAA,MACX3B,GAAWC,EAAAA,EAAAA,MACX2B,EAA+B,QAAjBH,EAAGC,EAASG,aAAK,IAAAJ,OAAA,EAAdA,EAAgBG,gBACjC,YAAEE,EAAW,QAAEhC,EAAO,MAAEiC,EAAK,QAAEC,GChFZJ,KACzB,MAAOE,EAAaG,IAAkBtC,EAAAA,EAAAA,UAAS,KACxCG,EAASC,IAAcJ,EAAAA,EAAAA,WAAS,IAChCoC,EAAOG,IAAYvC,EAAAA,EAAAA,UAAS,MAC7BwC,GAAaC,EAAAA,EAAAA,QAAO,IACpBC,GAASD,EAAAA,EAAAA,QAAO,MAEhBE,EAAeA,KACbH,EAAWI,UACXJ,EAAWI,QAAQC,SAAQC,GAAUA,EAAOC,OAAO,QACnDP,EAAWI,QAAU,GACzB,EAGEP,GAAUW,EAAAA,EAAAA,cACZC,iBAAyB,IAAlBC,EAAOC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EACd,IAAKG,OAAOC,OACR,MAAM,IAAIC,MAAM,0BAGpB,IAAK,IAADC,EAAAC,EAGA,GAFAf,IAEmB,OAAdV,QAAc,IAAdA,GAA2B,QAAbwB,EAAdxB,EAAgB0B,mBAAW,IAAAF,IAA3BA,EAA6BG,KAAsB,OAAd3B,QAAc,IAAdA,GAA2B,QAAbyB,EAAdzB,EAAgB0B,mBAAW,IAAAD,IAA3BA,EAA6BG,IACnE,MAAM,IAAIL,MAAM,gCAGpB,MAAMG,EAAc,IAAIL,OAAOC,OAAOO,KAAKC,OACvC9B,EAAe0B,YAAYC,IAC3B3B,EAAe0B,YAAYE,KAG/BnB,EAAOE,QAAU,IAAIU,OAAOC,OAAOO,KAAKE,IAAIC,SAASC,eAAe,OAAQ,CACxEC,OAAQR,EACRS,KAAM,GACNC,MAAO,qBAGX,MAAMC,EAAU,IAAIhB,OAAOC,OAAOO,KAAKS,OAAOC,cAAc9B,EAAOE,SAE7D6B,EAAU,CACZ1C,SAAU4B,EACVe,QAAS,QAAQxB,EAAQyB,SAAW,KAAKC,OACzCC,OAAQvB,OAAOC,OAAOO,KAAKS,OAAOO,OAAOC,UAGzC7B,EAAQ8B,UACRP,EAAQO,SAAU,GAGtB,MAAMC,QAAgB,IAAIC,SAAQ,CAACC,EAASC,KACxCd,EAAQe,aAAaZ,GAAS,CAACQ,EAASK,KAChCA,IAAWhC,OAAOC,OAAOO,KAAKS,OAAOgB,oBAAoBC,GACzDL,EAAQF,GAERG,EAAO,IAAI5B,MAAM,qBAAqB8B,KAC1C,GACF,IAIAG,EAAkBvC,EAAQwC,UAC1BT,EAAQU,QAAQC,GAAUA,EAAM3E,QAAUiC,EAAQwC,YAClDT,EAEAY,EAAgB3C,EAAQwC,UACxBD,EAAgBK,MAAK,CAACC,EAAGC,IAAMA,EAAE/E,OAAS8E,EAAE9E,SAC5CwE,EAGNI,EAAchD,SAAS+C,IAAW,IAADK,EAC7B,GAAkB,QAAlBA,EAAIL,EAAMM,gBAAQ,IAAAD,GAAdA,EAAgBlE,SAAU,CAC1B,MAAMe,EAAS,IAAIQ,OAAOC,OAAOO,KAAKqC,OAAO,CACzCC,SAAUR,EAAMM,SAASnE,SACzBN,IAAKiB,EAAOE,QACZyD,MAAOT,EAAM7E,OAGXuF,EAAa,IAAIhD,OAAOC,OAAOO,KAAKyC,WAAW,CACjDC,QAAS,4EAECZ,EAAM7E,iDACP6E,EAAM5E,oDACN4E,EAAM3E,OAAS,GAAG2E,EAAM3E,gBAAa,kFAKlD6B,EAAO2D,YAAY,SAAS,KACxBH,EAAWI,KAAKhE,EAAOE,QAASE,EAAO,IAG3CN,EAAWI,QAAQ+D,KAAK7D,EAC5B,KAIJR,EAAeuD,GACfzF,GAAW,EACf,CAAE,MAAOwG,GAGL,MAFArE,EAASqE,EAAIC,SACbzG,GAAW,GACLwG,CACV,CACJ,GACA,CAAC3E,IAYL,OANA6E,EAAAA,EAAAA,YAAU,IACC,KACHnE,GAAc,GAEnB,IAEI,CAAER,cAAahC,UAASiC,QAAOC,UAAS,EDrCE0E,CAAa9E,IACvD+E,EAASC,IAAcjH,EAAAA,EAAAA,WAAS,GAEjCkH,EAAYA,KACdD,GAAYE,IAAUA,GAAK,GAGxBjE,EAASkE,IAAcpH,EAAAA,EAAAA,UAAS,CACnC2E,QAAS,GACTK,SAAS,EACTqC,WAAY,QAGhBP,EAAAA,EAAAA,YAAU,KACN,IAAK7E,EAED,YADA5B,EAAS,KAIb,IAAIiH,EAGJ,IAAIC,EAAa,EAEjB,MAAMC,EAAcvE,UAChB,UACUZ,EAAQa,EAClB,CAAE,MAAO0D,GACDW,EARQ,GASRA,IACAD,EAAYG,WAAWD,EATZ,MAWXE,QAAQtF,MAAM,oCAAqCwE,EAE3D,GAKJ,OAFAY,IAEO,KACCF,GACAK,aAAaL,EACjB,CACH,GACF,CAACrF,EAAgB5B,EAAUgC,EAASa,IAEvC,MAAM0E,EAAsBC,IACxB,MAAM,KAAE9G,EAAI,MAAE+G,EAAK,KAAEC,EAAI,QAAEC,GAAYH,EAAEI,OACzCb,GAAYD,IAAI,IACTA,EACH,CAACpG,GAAgB,cAATA,GAAkC,KAAV+G,EAAeI,WAAWJ,GAAkB,aAATC,EAAsBC,EAAUF,KACpG,EAgCP,OANAhB,EAAAA,EAAAA,YAAU,MACD3G,IAAYiC,GAASD,EAAYiB,OAAS,GAxBvBH,WACxB,IACI,MAAMkF,QAAiBC,MAAM,6CAA8C,CACvEC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CAAEtG,kBAGrBuG,QAAeP,EAASQ,OAE9B,IAAKR,EAASS,GAEV,MADAlB,QAAQtF,MAAM,8BAA+BsG,GACvC,IAAIlF,MAAMkF,EAAO7B,SAAW,8CAGtCa,QAAQmB,IAAI,kCAAmCH,EACnD,CAAE,MAAO9B,GACLc,QAAQtF,MAAM,4BAA6BwE,EAAIC,QACnD,GAKIiC,CAAoB3G,EACxB,GACD,CAAChC,EAASiC,EAAOD,KAGhB5B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EACzBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,EAC3BF,EAAAA,EAAAA,MAAA,UAAQe,QAASA,IAAMjB,EAAS,KAAMG,UAAU,cAAaC,SAAA,EACzDE,EAAAA,EAAAA,KAAA,KAAGH,UAAU,sBAAwB,sBAEzCD,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CAAI,qBACgC,OAAdwB,QAAc,IAAdA,OAAc,EAAdA,EAAgB8G,UAAW,+BAIrDxI,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBC,SAAA,EAC9BF,EAAAA,EAAAA,MAAA,UAAQQ,KAAK,UAAU+G,MAAO5E,EAAQyB,QAASqE,SAAUpB,EAAmBnH,SAAA,EACxEE,EAAAA,EAAAA,KAAA,UAAQmH,MAAM,GAAErH,SAAC,kBACjBE,EAAAA,EAAAA,KAAA,UAAQmH,MAAM,UAASrH,SAAC,aACxBE,EAAAA,EAAAA,KAAA,UAAQmH,MAAM,SAAQrH,SAAC,YACvBE,EAAAA,EAAAA,KAAA,UAAQmH,MAAM,UAASrH,SAAC,aACxBE,EAAAA,EAAAA,KAAA,UAAQmH,MAAM,QAAOrH,SAAC,cAE1BF,EAAAA,EAAAA,MAAA,SAAAE,SAAA,EACIE,EAAAA,EAAAA,KAAA,SACIoH,KAAK,WACLhH,KAAK,UACLiH,QAAS9E,EAAQ8B,QACjBgE,SAAUpB,IACZ,eAGNrH,EAAAA,EAAAA,MAAA,UAAQQ,KAAK,YAAY+G,MAAO5E,EAAQwC,WAAa,GAAIsD,SAAUpB,EAAmBnH,SAAA,EAClFE,EAAAA,EAAAA,KAAA,UAAQmH,MAAM,GAAErH,SAAC,iBACjBE,EAAAA,EAAAA,KAAA,UAAQmH,MAAM,IAAGrH,SAAC,cAClBE,EAAAA,EAAAA,KAAA,UAAQmH,MAAM,IAAGrH,SAAC,cAClBE,EAAAA,EAAAA,KAAA,UAAQmH,MAAM,IAAGrH,SAAC,oBAI1BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBC,SAAA,CAC7BuG,IACGrG,EAAAA,EAAAA,KAAA,OAAKsI,GAAG,MAAMzI,UAAU,gBAAeC,UACnCE,EAAAA,EAAAA,KAAA,OAAKH,UAAU,WAAUC,UACrBF,EAAAA,EAAAA,MAAA,UAAQyI,SAAU9B,EAAW1G,UAAU,kBAAiBC,SAAA,EACpDE,EAAAA,EAAAA,KAAA,UAAQmH,MAAM,OAAMrH,SAAC,cACrBE,EAAAA,EAAAA,KAAA,UAAQmH,MAAM,OAAMrH,SAAC,qBAKnCuG,IACErG,EAAAA,EAAAA,KAAA,OAAKH,UAAU,WAAUC,UACrBE,EAAAA,EAAAA,KAAA,UAAQqI,SAAU9B,EAAW1G,UAAU,kBAAiBC,UACpDE,EAAAA,EAAAA,KAAA,UAAQmH,MAAM,OAAMrH,SAAC,kBAKjCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,CAC5BN,IAAWQ,EAAAA,EAAAA,KAAA,OAAKH,UAAU,UAASC,SAAC,iCACpC2B,IAASzB,EAAAA,EAAAA,KAAA,OAAKH,UAAU,gBAAeC,SAAE2B,KAExCjC,IACGiC,GACDD,EAAYV,KAAK5B,IACbc,EAAAA,EAAAA,KAACjB,EAAc,CAEXG,WAAYA,GADPA,EAAW2B,oBAMlC,C","sources":["pages/RestaurantResults.jsx","hooks/useGoogleMaps.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { useGoogleMap } from \"../hooks/useGoogleMaps\";\nimport \"./RestaurantResults.css\";\n\nconst RestaurantCard = ({ restaurant }) => {\n    const [showMenu, setShowMenu] = useState(false);\n    const [menuData, setMenuData] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const navigate = useNavigate();\n\n    const handleViewMenu = () => {\n        navigate(`/restaurant/${restaurant.place_id}/menu`);\n    };\n\n    return (\n        <div className=\"restaurant-card\">\n            {restaurant.photos?.[0] && (\n                <img\n                    src={restaurant.photos[0].getUrl()}\n                    alt={restaurant.name}\n                    className=\"restaurant-image\"\n                />\n            )}\n            <div className=\"restaurant-info\">\n                <h3>{restaurant.name}</h3>\n                <p>{restaurant.vicinity}</p>\n                <div className=\"restaurant-details\">\n                    <span className=\"rating\">\n                        {restaurant.rating ? `${restaurant.rating} ⭐` : \"No rating\"}\n                    </span>\n                    {restaurant.price_level && (\n                        <span className=\"price-level\">\n                            {\"$\".repeat(restaurant.price_level)}\n                        </span>\n                    )}\n                </div>\n                {restaurant.opening_hours && (\n                    <p className={`status ${restaurant.opening_hours.isOpen\n                        ? restaurant.opening_hours.isOpen()\n                            ? \"open\"\n                            : \"closed\"\n                        : \"unknown\"\n                        }`}>\n                        {restaurant.opening_hours.isOpen\n                            ? restaurant.opening_hours.isOpen()\n                                ? \"Open Now\"\n                                : \"Closed\"\n                            : \"No Opening Information\"}\n                    </p>\n                )}\n                <button\n                    className=\"view-menu-button\"\n                    onClick={handleViewMenu}\n                >\n                    View Menu\n                </button>\n\n                {showMenu && menuData && (\n                    <div className=\"menu-modal\">\n                        <div className=\"menu-content\">\n                            <h4>{restaurant.name} - Menu</h4>\n                            <button className=\"close-menu\" onClick={() => setShowMenu(false)}>×</button>\n                            <div className=\"menu-items\">\n                                {menuData.map((item, index) => (\n                                    <div key={index} className=\"menu-item\">\n                                        <span className=\"item-name\">{item.name}</span>\n                                        <span className=\"item-price\">${item.price}</span>\n                                    </div>\n                                ))}\n                            </div>\n                        </div>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nconst RestaurantResults = () => {\n    const location = useLocation();\n    const navigate = useNavigate();\n    const searchLocation = location.state?.searchLocation;\n    const { restaurants, loading, error, initMap } = useGoogleMap(searchLocation);\n    const [showMap, setShowMap] = useState(true);\n\n    const toggleMap = () => {\n        setShowMap((prev) => !prev);\n    };\n\n    const [filters, setFilters] = useState({\n        cuisine: \"\",\n        openNow: false,\n        priceLevel: null,\n    });\n\n    useEffect(() => {\n        if (!searchLocation) {\n            navigate(\"/\");\n            return;\n        }\n\n        let timeoutId;\n        const MAX_RETRIES = 5;\n        const RETRY_INTERVAL = 1000;\n        let retryCount = 0;\n\n        const attemptLoad = async () => {\n            try {\n                await initMap(filters);\n            } catch (err) {\n                if (retryCount < MAX_RETRIES) {\n                    retryCount++;\n                    timeoutId = setTimeout(attemptLoad, RETRY_INTERVAL);\n                } else {\n                    console.error(\"Failed to load map after retries:\", err);\n                }\n            }\n        };\n\n        attemptLoad();\n\n        return () => {\n            if (timeoutId) {\n                clearTimeout(timeoutId);\n            }\n        };\n    }, [searchLocation, navigate, initMap, filters]);\n\n    const handleFilterChange = (e) => {\n        const { name, value, type, checked } = e.target;\n        setFilters((prev) => ({\n            ...prev,\n            [name]: name === \"minRating\" && value !== \"\" ? parseFloat(value) : type === \"checkbox\" ? checked : value,\n        }));\n    };\n\n    const saveRestaurantsToDB = async (restaurants) => {\n        try {\n            const response = await fetch(\"http://localhost:8000/api/restaurants/save\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({ restaurants }),\n            });\n\n            const result = await response.json();\n\n            if (!response.ok) {\n                console.error(\"Error response from server:\", result);\n                throw new Error(result.message || \"Failed to save restaurants to the database\");\n            }\n\n            console.log(\"Restaurants saved successfully:\", result);\n        } catch (err) {\n            console.error(\"Error saving restaurants:\", err.message);\n        }\n    };\n\n    useEffect(() => {\n        if (!loading && !error && restaurants.length > 0) {\n            saveRestaurantsToDB(restaurants);\n        }\n    }, [loading, error, restaurants]);\n\n    return (\n        <div className=\"results-page\">\n            <div className=\"results-header\">\n                <button onClick={() => navigate(\"/\")} className=\"back-button\">\n                    <i className=\"fas fa-arrow-left\"></i> Back to Search\n                </button>\n                <h1>\n                    Restaurants near {searchLocation?.address || \"the selected location\"}\n                </h1>\n            </div>\n\n            <div className=\"filters-container\">\n                <select name=\"cuisine\" value={filters.cuisine} onChange={handleFilterChange}>\n                    <option value=\"\">All Cuisines</option>\n                    <option value=\"italian\">Italian</option>\n                    <option value=\"indian\">Indian</option>\n                    <option value=\"chinese\">Chinese</option>\n                    <option value=\"pizza\">Pizza</option>\n                </select>\n                <label>\n                    <input\n                        type=\"checkbox\"\n                        name=\"openNow\"\n                        checked={filters.openNow}\n                        onChange={handleFilterChange}\n                    />\n                    Open Now\n                </label>\n                <select name=\"minRating\" value={filters.minRating || \"\"} onChange={handleFilterChange}>\n                    <option value=\"\">All Ratings</option>\n                    <option value=\"3\">3 ⭐</option>\n                    <option value=\"4\">4 ⭐</option>\n                    <option value=\"5\">5 ⭐</option>\n                </select>\n            </div>\n\n            <div className=\"results-container\">\n                {showMap && (\n                    <div id=\"map\" className=\"map-container\">\n                        <div className=\"dropdown\">\n                            <select onChange={toggleMap} className=\"dropdown-toggle\">\n                                <option value=\"show\">Hide Map</option>\n                                <option value=\"hide\">Show Map</option>\n                            </select>\n                        </div>\n                    </div>\n                )}\n                {!showMap && (\n                    <div className=\"dropdown\">\n                        <select onChange={toggleMap} className=\"dropdown-toggle\">\n                            <option value=\"show\">Show Map</option>\n                        </select>\n                    </div>\n                )}\n\n                <div className=\"restaurants-list\">\n                    {loading && <div className=\"loading\">Searching for restaurants...</div>}\n                    {error && <div className=\"error-message\">{error}</div>}\n\n                    {!loading &&\n                        !error &&\n                        restaurants.map((restaurant) => (\n                            <RestaurantCard\n                                key={restaurant.place_id}\n                                restaurant={restaurant}\n                            />\n                        ))}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default RestaurantResults;","// src/hooks/useGoogleMap.js\nimport { useState, useCallback, useRef, useEffect } from 'react';\n\nexport const useGoogleMap = (searchLocation) => {\n    const [restaurants, setRestaurants] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const markersRef = useRef([]);\n    const mapRef = useRef(null);\n\n    const clearMarkers = () => {\n        if (markersRef.current) {\n            markersRef.current.forEach(marker => marker.setMap(null));\n            markersRef.current = [];\n        }\n    };\n\n    const initMap = useCallback(\n        async (filters = {}) => {\n            if (!window.google) {\n                throw new Error(\"Google Maps not loaded\");\n            }\n\n            try {\n                clearMarkers();\n\n                if (!searchLocation?.coordinates?.lat || !searchLocation?.coordinates?.lng) {\n                    throw new Error(\"Invalid location coordinates\");\n                }\n\n                const coordinates = new window.google.maps.LatLng(\n                    searchLocation.coordinates.lat,\n                    searchLocation.coordinates.lng\n                );\n\n                mapRef.current = new window.google.maps.Map(document.getElementById(\"map\"), {\n                    center: coordinates,\n                    zoom: 14,\n                    mapId: \"3d323ae4d3f413fd\",\n                });\n\n                const service = new window.google.maps.places.PlacesService(mapRef.current);\n\n                const request = {\n                    location: coordinates,\n                    keyword: `food ${filters.cuisine || \"\"}`.trim(),\n                    rankBy: window.google.maps.places.RankBy.DISTANCE,\n                };\n\n                if (filters.openNow) {\n                    request.openNow = true;\n                }\n\n                const results = await new Promise((resolve, reject) => {\n                    service.nearbySearch(request, (results, status) => {\n                        if (status === window.google.maps.places.PlacesServiceStatus.OK) {\n                            resolve(results);\n                        } else {\n                            reject(new Error(`Places API error: ${status}`));\n                        }\n                    });\n                });\n\n                // Filter results by minimum rating (if specified)\n                const filteredResults = filters.minRating\n                    ? results.filter((place) => place.rating >= filters.minRating)\n                    : results;\n\n                const sortedResults = filters.minRating\n                    ? filteredResults.sort((a, b) => b.rating - a.rating)\n                    : filteredResults;\n\n                // Add markers for sorted results\n                sortedResults.forEach((place) => {\n                    if (place.geometry?.location) {\n                        const marker = new window.google.maps.Marker({\n                            position: place.geometry.location,\n                            map: mapRef.current,\n                            title: place.name,\n                        });\n\n                        const infowindow = new window.google.maps.InfoWindow({\n                            content: `\n                            <div>\n                                <h3>${place.name}</h3>\n                                <p>${place.vicinity}</p>\n                                <p>${place.rating ? `${place.rating} ⭐` : \"No rating\"}</p>\n                            </div>\n                        `,\n                        });\n\n                        marker.addListener(\"click\", () => {\n                            infowindow.open(mapRef.current, marker);\n                        });\n\n                        markersRef.current.push(marker);\n                    }\n                });\n\n                // Update restaurants state\n                setRestaurants(sortedResults);\n                setLoading(false);\n            } catch (err) {\n                setError(err.message);\n                setLoading(false);\n                throw err;\n            }\n        },\n        [searchLocation]\n    );\n\n\n\n    // Cleanup on unmount\n    useEffect(() => {\n        return () => {\n            clearMarkers();\n        };\n    }, []);\n\n    return { restaurants, loading, error, initMap };\n};"],"names":["RestaurantCard","_ref","_restaurant$photos","restaurant","showMenu","setShowMenu","useState","menuData","setMenuData","loading","setLoading","navigate","useNavigate","_jsxs","className","children","photos","_jsx","src","getUrl","alt","name","vicinity","rating","price_level","repeat","opening_hours","isOpen","onClick","handleViewMenu","place_id","map","item","index","price","RestaurantResults","_location$state","location","useLocation","searchLocation","state","restaurants","error","initMap","setRestaurants","setError","markersRef","useRef","mapRef","clearMarkers","current","forEach","marker","setMap","useCallback","async","filters","arguments","length","undefined","window","google","Error","_searchLocation$coord","_searchLocation$coord2","coordinates","lat","lng","maps","LatLng","Map","document","getElementById","center","zoom","mapId","service","places","PlacesService","request","keyword","cuisine","trim","rankBy","RankBy","DISTANCE","openNow","results","Promise","resolve","reject","nearbySearch","status","PlacesServiceStatus","OK","filteredResults","minRating","filter","place","sortedResults","sort","a","b","_place$geometry","geometry","Marker","position","title","infowindow","InfoWindow","content","addListener","open","push","err","message","useEffect","useGoogleMap","showMap","setShowMap","toggleMap","prev","setFilters","priceLevel","timeoutId","retryCount","attemptLoad","setTimeout","console","clearTimeout","handleFilterChange","e","value","type","checked","target","parseFloat","response","fetch","method","headers","body","JSON","stringify","result","json","ok","log","saveRestaurantsToDB","address","onChange","id"],"sourceRoot":""}